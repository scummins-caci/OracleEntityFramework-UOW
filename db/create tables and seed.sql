create table "EF_TEST"."CustomDashboards"
(
    "DashboardID" number(10, 0) not null, 
    "Name" nvarchar2(200) null, 
    "DateCreated" date not null, 
    "CreatedBy" number(10, 0) not null, 
    "IsPublic" number(1, 0) not null,
    constraint "PK_CustomDashboards" primary key ("DashboardID")
)
/

create sequence "EF_TEST"."SQ_CustomDashboards"
/

create or replace trigger "EF_TEST"."TR_CustomDashboards"
before insert on "EF_TEST"."CustomDashboards"
for each row
begin
  select "EF_TEST"."SQ_CustomDashboards".nextval into :new."DashboardID" from dual;
end;
/

create table "EF_TEST"."UserParameters"
(
    "ID" number(10, 0) not null, 
    "UserID" number(10, 0) not null,
    constraint "PK_UserParameters" primary key ("ID")
)
/

create sequence "EF_TEST"."SQ_UserParameters"
/

create or replace trigger "EF_TEST"."TR_UserParameters"
before insert on "EF_TEST"."UserParameters"
for each row
begin
  select "EF_TEST"."SQ_UserParameters".nextval into :new."ID" from dual;
end;
/

create table "EF_TEST"."Widgets"
(
    "WidgetID" number(10, 0) not null, 
    "DisplayName" nvarchar2(200) null, 
    "ControlName" nvarchar2(200) null,
    constraint "PK_Widgets" primary key ("WidgetID")
)
/

create sequence "EF_TEST"."SQ_Widgets"
/

create or replace trigger "EF_TEST"."TR_Widgets"
before insert on "EF_TEST"."Widgets"
for each row
begin
  select "EF_TEST"."SQ_Widgets".nextval into :new."WidgetID" from dual;
end;
/

create table "EF_TEST"."UserParametersCustomDashboards"
(
    "UserParameters_ID" number(10, 0) not null, 
    "CustomDashboard_DashboardID" number(10, 0) not null,
    constraint "PK_UserParametersCu_1572748426" primary key ("UserParameters_ID", "CustomDashboard_DashboardID")
)
/

create table "EF_TEST"."WidgetCustomDashboards"
(
    "Widget_WidgetID" number(10, 0) not null, 
    "CustomDashboard_DashboardID" number(10, 0) not null,
    constraint "PK_WidgetCustomDashboards" primary key ("Widget_WidgetID", "CustomDashboard_DashboardID")
)
/

begin
  execute immediate
  'create unique index "EF_TEST"."IX_CustomDashboards_Name" on "EF_TEST"."CustomDashboards" ("Name")';
exception
  when others then
    if sqlcode <> -1408 then
      raise;
    end if;
end;
/

begin
  execute immediate
  'create unique index "EF_TEST"."IX_Widgets_DisplayName" on "EF_TEST"."Widgets" ("DisplayName")';
exception
  when others then
    if sqlcode <> -1408 then
      raise;
    end if;
end;
/

begin
  execute immediate
  'create index "EF_TEST"."IX_UserParametersCus_988667905" on "EF_TEST"."UserParametersCustomDashboards" ("UserParameters_ID")';
exception
  when others then
    if sqlcode <> -1408 then
      raise;
    end if;
end;
/

begin
  execute immediate
  'create index "EF_TEST"."IX_UserParametersCu_1036447443" on "EF_TEST"."UserParametersCustomDashboards" ("CustomDashboard_DashboardID")';
exception
  when others then
    if sqlcode <> -1408 then
      raise;
    end if;
end;
/

begin
  execute immediate
  'create index "EF_TEST"."IX_WidgetCustomDash_1866953086" on "EF_TEST"."WidgetCustomDashboards" ("Widget_WidgetID")';
exception
  when others then
    if sqlcode <> -1408 then
      raise;
    end if;
end;
/

begin
  execute immediate
  'create index "EF_TEST"."IX_WidgetCustomDash_2044806204" on "EF_TEST"."WidgetCustomDashboards" ("CustomDashboard_DashboardID")';
exception
  when others then
    if sqlcode <> -1408 then
      raise;
    end if;
end;
/

alter table "EF_TEST"."UserParametersCustomDashboards" add constraint "FK_UserParametersCu_1128755724" foreign key ("UserParameters_ID") references "EF_TEST"."UserParameters" ("ID") on delete cascade
/

alter table "EF_TEST"."UserParametersCustomDashboards" add constraint "FK_UserParametersCus_564690558" foreign key ("CustomDashboard_DashboardID") references "EF_TEST"."CustomDashboards" ("DashboardID") on delete cascade
/

alter table "EF_TEST"."WidgetCustomDashboards" add constraint "FK_WidgetCustomDashb_286727981" foreign key ("Widget_WidgetID") references "EF_TEST"."Widgets" ("WidgetID") on delete cascade
/

alter table "EF_TEST"."WidgetCustomDashboards" add constraint "FK_WidgetCustomDash_1901012466" foreign key ("CustomDashboard_DashboardID") references "EF_TEST"."CustomDashboards" ("DashboardID") on delete cascade
/

create table "EF_TEST"."__MigrationHistory"
(
    "MigrationId" nvarchar2(150) not null, 
    "ContextKey" nvarchar2(300) not null, 
    "Model" blob not null, 
    "ProductVersion" nvarchar2(32) not null,
    constraint "PK___MigrationHistory" primary key ("MigrationId", "ContextKey")
)
/

declare
model_blob blob;
begin
dbms_lob.createtemporary(model_blob, true);
dbms_lob.append(model_blob, to_blob(castas long raw)));
dbms_lob.append(model_blob, to_blob(castas long raw)));
dbms_lob.append(model_blob, to_blob(cast('6B2056DCB63D0000' as long raw)));
insert into "EF_TEST"."__MigrationHistory"("MigrationId", "ContextKey", "Model", "ProductVersion")
values ('201501302031192_AutomaticMigration', 'OracleEntityFramework.Migrations.Configuration', model_blob, '6.1.2-31219');
end;


INSERT INTO "EF_TEST"."Widgets" values("EF_TEST"."SQ_Widgets".nextval, 'Executed Search Counts', '_SearchCountsPartial.cshtml');
INSERT INTO "EF_TEST"."Widgets" values("EF_TEST"."SQ_Widgets".nextval, 'Executed Search Audit Info', '_SearchAuditsPartial.cshtml');
INSERT INTO "EF_TEST"."Widgets" values("EF_TEST"."SQ_Widgets".nextval, 'Workflow Log Info', '_WorkflowLogsPartial.cshtml');
INSERT INTO "EF_TEST"."Widgets" values("EF_TEST"."SQ_Widgets".nextval, 'Workflow Service Info', '_WorkflowServicesPartial.cshtml');
INSERT INTO "EF_TEST"."Widgets" values("EF_TEST"."SQ_Widgets".nextval, 'Current Workitem Counts', '_WorkitemCountsPartial.cshtml');
INSERT INTO "EF_TEST"."Widgets" values("EF_TEST"."SQ_Widgets".nextval, 'Current Workitem Status', '_WorkitemStatusPartial.cshtml');
INSERT INTO "EF_TEST"."Widgets" values("EF_TEST"."SQ_Widgets".nextval, 'Dataflow Records', '_DataflowReceiptsPartial.cshtml');
commit;